// <auto-generated />
using System;
using DemoProductApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DemoProductApi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250911222213_RemoveChildBundle")]
    partial class RemoveChildBundle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DemoProductApi.Domain.Entities.Bundle", b =>
                {
                    b.Property<Guid>("BundleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BundleId");

                    b.HasIndex("Status", "Name");

                    b.ToTable("Bundles");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.BundleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildProductItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.HasIndex("ChildProductItemId");

                    b.ToTable("BundleItems");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("InTransit")
                        .HasColumnType("integer");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("OnHand")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReorderPoint")
                        .HasColumnType("integer");

                    b.Property<int>("Reserved")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductItemId", "LocationId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<decimal>("ListPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("SalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateOnly>("ValidFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ValidTo")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EntityType", "EntityId", "ValidFrom", "ValidTo");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SkuPrefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId");

                    b.HasIndex("Status", "Name");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.ProductItem", b =>
                {
                    b.Property<Guid>("ProductItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Volume")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.HasKey("ProductItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.ProductItemVariantValue", b =>
                {
                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VariantOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VariantOptionValueId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductItemId", "VariantOptionId");

                    b.HasIndex("VariantOptionValueId");

                    b.HasIndex("VariantOptionId", "VariantOptionValueId");

                    b.ToTable("ProductItemVariantValues");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.VariantOption", b =>
                {
                    b.Property<Guid>("VariantOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("VariantOptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("VariantOptions");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.VariantOptionValue", b =>
                {
                    b.Property<Guid>("VariantOptionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid>("VariantOptionId")
                        .HasColumnType("uuid");

                    b.HasKey("VariantOptionValueId");

                    b.HasIndex("VariantOptionId", "Value")
                        .IsUnique();

                    b.ToTable("VariantOptionValues");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.BundleItem", b =>
                {
                    b.HasOne("DemoProductApi.Domain.Entities.Bundle", "Bundle")
                        .WithMany("Items")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoProductApi.Domain.Entities.ProductItem", "ChildProductItem")
                        .WithMany()
                        .HasForeignKey("ChildProductItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bundle");

                    b.Navigation("ChildProductItem");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("DemoProductApi.Domain.Entities.Location", "Location")
                        .WithMany("Inventories")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoProductApi.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("DemoProductApi.Domain.Entities.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.ProductItemVariantValue", b =>
                {
                    b.HasOne("DemoProductApi.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("VariantValues")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoProductApi.Domain.Entities.VariantOption", "VariantOption")
                        .WithMany()
                        .HasForeignKey("VariantOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DemoProductApi.Domain.Entities.VariantOptionValue", "VariantOptionValue")
                        .WithMany("ProductItemVariantValues")
                        .HasForeignKey("VariantOptionValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductItem");

                    b.Navigation("VariantOption");

                    b.Navigation("VariantOptionValue");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.VariantOption", b =>
                {
                    b.HasOne("DemoProductApi.Domain.Entities.Product", "Product")
                        .WithMany("VariantOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.VariantOptionValue", b =>
                {
                    b.HasOne("DemoProductApi.Domain.Entities.VariantOption", "VariantOption")
                        .WithMany("Values")
                        .HasForeignKey("VariantOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VariantOption");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.Bundle", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.Location", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductItems");

                    b.Navigation("VariantOptions");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.ProductItem", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("VariantValues");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.VariantOption", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("DemoProductApi.Domain.Entities.VariantOptionValue", b =>
                {
                    b.Navigation("ProductItemVariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
